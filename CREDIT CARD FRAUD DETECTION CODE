{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10138071,"sourceType":"datasetVersion","datasetId":6256872}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"***In this project, we used the Credit Card Fraud Detection dataset, which contains a mixture of legitimate and fraudulent transactions. The dataset includes various anonymized features, such as transaction amount, transaction type, and time. The target variable, Class, indicates whether a transaction is fraudulent (1) or legitimate (0).***","metadata":{}},{"cell_type":"markdown","source":"****Importing Libraries and Loadind Data****","metadata":{}},{"cell_type":"code","source":"# import the necessary packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import gridspec","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/dataset/creditcard.csv\")\ndata.head()\nprint(data.shape)\nprint(data.describe())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Determine number of fraud cases in dataset\nfraud = data[data['Class'] == 1]\nvalid = data[data['Class'] == 0]\noutlierFraction = len(fraud)/float(len(valid))\nprint(outlierFraction)\nprint('Fraud Cases: {}'.format(len(data[data['Class'] == 1])))\nprint('Valid Transactions: {}'.format(len(data[data['Class'] == 0])))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Calculate the correlation matrix\ncorrmat = data.corr()\n\n# Set up the figure size with a clean, modern look\nplt.figure(figsize=(14, 10))\n\n# Use a more vibrant color palette with annotations for a clearer view\nsns.heatmap(corrmat, annot=True, fmt='.2f', cmap='Spectral', vmax=0.8, square=True, linewidths=1, linecolor='white', \n            cbar_kws={'shrink': 0.8, 'ticks': [-1, 0, 1]}, \n            annot_kws={'size': 12, 'weight': 'bold', 'color': 'black'})\n\n# Add a title with a bold font style for emphasis\nplt.title(\"Correlation Matrix of Features\", fontsize=18, weight='bold', color='darkblue')\n\n# Style the background for a polished look\nplt.gca().set_facecolor('lightgray')\n\n# Add labels with a larger font for better readability\nplt.xticks(fontsize=12, rotation=45, ha='right', color='darkred')\nplt.yticks(fontsize=12, rotation=0, ha='right', color='darkred')\n\n# Display the plot\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# dividing the X and the Y from the dataset\nX = data.drop(['Class'], axis = 1)\nY = data[\"Class\"]\nprint(X.shape)\nprint(Y.shape)\n# getting just the values for the sake of processing \n# (its a numpy array with no columns)\nxData = X.values\nyData = Y.values","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Using Scikit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n# Split the data into training and testing sets\nxTrain, xTest, yTrain, yTest = train_test_split(\n        xData, yData, test_size = 0.2, random_state = 42)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Building the Random Forest Classifier (RANDOM FOREST)\nfrom sklearn.ensemble import RandomForestClassifier\n# random forest model creation\nrfc = RandomForestClassifier()\nrfc.fit(xTrain, yTrain)\n# predictions\nyPred = rfc.predict(xTest)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import classification_report, accuracy_score \nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score, matthews_corrcoef\nfrom sklearn.metrics import confusion_matrix\n\nn_outliers = len(fraud)\nn_errors = (yPred != yTest).sum()\nprint(\"The model used is Random Forest classifier\")\n\nacc = accuracy_score(yTest, yPred)\nprint(\"The accuracy is {}\".format(acc))\n\nprec = precision_score(yTest, yPred)\nprint(\"The precision is {}\".format(prec))\n\nrec = recall_score(yTest, yPred)\nprint(\"The recall is {}\".format(rec))\n\nf1 = f1_score(yTest, yPred)\nprint(\"The F1-Score is {}\".format(f1))\n\nMCC = matthews_corrcoef(yTest, yPred)\nprint(\"The Matthews correlation coefficient is{}\".format(MCC))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Assuming yTest and yPred are already defined\nLABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(yTest, yPred)\n\n# Normalize the confusion matrix to show proportions\nconf_matrix_norm = conf_matrix.astype('float') / conf_matrix.sum(axis=1)[:, np.newaxis]\n\n# Set up the figure size for the plot\nplt.figure(figsize=(12, 8))\n\n# Create a stacked bar chart for visualizing the confusion matrix\nbar_width = 0.35\nindex = np.arange(len(LABELS))\n\n# Plot each class as a stacked bar\nplt.bar(index, conf_matrix_norm[0], bar_width, label='Predicted Normal', color='lightgreen')\nplt.bar(index, conf_matrix_norm[1], bar_width, bottom=conf_matrix_norm[0], label='Predicted Fraud', color='lightcoral')\n\n# Add annotations on top of the bars\nfor i in range(len(LABELS)):\n    plt.text(i, conf_matrix_norm[0, i] / 2, f'{int(conf_matrix[0, i])}', ha='center', color='black', fontweight='bold')\n    plt.text(i, conf_matrix_norm[0, i] + conf_matrix_norm[1, i] / 2, f'{int(conf_matrix[1, i])}', ha='center', color='black', fontweight='bold')\n\n# Add labels and title\nplt.xlabel('True Class', fontsize=14, fontweight='bold', color='darkblue')\nplt.ylabel('Proportions', fontsize=14, fontweight='bold', color='darkblue')\nplt.title(\"Confusion Matrix Representation (Stacked Bar)\", fontsize=16, fontweight='bold', color='darkblue')\n\n# Set x-axis labels\nplt.xticks(index, LABELS, fontsize=12, fontweight='bold', color='darkred')\n\n# Show legend\nplt.legend()\n\n# Display the plot\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}